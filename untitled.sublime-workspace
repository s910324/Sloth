{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"sm",
				"symbol	(statement)"
			],
			[
				"bok",
				"bokeh	(module)"
			],
			[
				"g",
				"GraphEditor	(module)"
			],
			[
				"wid",
				"width	(statement)"
			],
			[
				"an",
				"angle	(statement)"
			],
			[
				"align",
				"AlignVCenter	(class)"
			],
			[
				"Solid",
				"SolidPattern	(class)"
			],
			[
				"No",
				"None	(keyword)"
			],
			[
				"se",
				"setStyle	(function)"
			],
			[
				"sol",
				"SolidPattern	(class)"
			],
			[
				"Cross",
				"CrossPattern	(class)"
			],
			[
				"br",
				"brush	(statement)"
			],
			[
				"bu",
				"brush	(statement)"
			],
			[
				"tex",
				"TexturePattern	(class)"
			],
			[
				"setwin",
				"setWindowTitle	(function)"
			],
			[
				"op",
				"option	(param)"
			],
			[
				"pa",
				"parent"
			],
			[
				"p",
				"polygon	(statement)"
			],
			[
				"va",
				"value	(function)"
			],
			[
				"hei",
				"heightCtrl	(statement)"
			],
			[
				"val",
				"valueChanged	(class)"
			],
			[
				"paint",
				"paintLabel	(function)"
			],
			[
				"dens",
				"Dense3Pattern	(class)"
			],
			[
				"QG",
				"QGraphicsItem	(class)"
			],
			[
				"setF",
				"setFixedWidth	(function)"
			],
			[
				"adds",
				"addStretch	(function)"
			],
			[
				"top",
				"topLabel	(statement)"
			],
			[
				"QGrapicSc",
				"QGraphicsScene	(class)"
			],
			[
				"da",
				"dataSet	(param)"
			],
			[
				"l",
				"axis_label"
			],
			[
				"la",
				"xaxis_label"
			],
			[
				"ma",
				"major_tick_in"
			],
			[
				"plo",
				"plotArea	(statement)"
			],
			[
				"w",
				"width	(statement)"
			],
			[
				"border",
				"borderfill"
			],
			[
				"b",
				"borderfill	(statement)"
			],
			[
				"ya",
				"yaxis_maximum	(statement)"
			],
			[
				"xaxis",
				"xaxis_width"
			],
			[
				"xa",
				"xaxis_color"
			],
			[
				"min",
				"minorTick	(param)"
			],
			[
				"plot_xa",
				"plot_xaxis_minorTick	(function)"
			],
			[
				"ti",
				"tickOut	(param)"
			],
			[
				"x",
				"xaxis	(statement)"
			],
			[
				"si",
				"title_size"
			],
			[
				"Not",
				"not	(keyword)"
			],
			[
				"lineI",
				"lineIDDict	(statement)"
			],
			[
				"re",
				"reload	(function)"
			],
			[
				"name",
				"name	(statement)"
			],
			[
				"pl",
				"plotIDDict	(statement)"
			],
			[
				"addp",
				"addPlotHolder	(function)"
			],
			[
				"o",
				"open"
			],
			[
				"Tra",
				"trainImg	(statement)"
			],
			[
				"tar",
				"targetImg	(statement)"
			],
			[
				"d",
				"Draw	(function)"
			],
			[
				"im",
				"img2	(statement)"
			],
			[
				"Im",
				"ImageDraw	(module)"
			],
			[
				"ne",
				"newMatch	(statement)"
			],
			[
				"N",
				"new	(function)"
			],
			[
				"set",
				"setFixedSize	(function)"
			],
			[
				"number",
				"number1"
			],
			[
				"s",
				"setValue"
			],
			[
				"return",
				"returnClass"
			],
			[
				"st",
				"string"
			],
			[
				"c",
				"cout"
			],
			[
				"plot",
				"plotPack	(statement)"
			],
			[
				"tool",
				"toolbar_location	(statement)"
			],
			[
				"v",
				"vform	(function)"
			],
			[
				"drawText",
				"drawTextItem	(function)"
			],
			[
				"AlignLe",
				"AlignLeft	(class)"
			],
			[
				"Qpa",
				"QPainter	(class)"
			],
			[
				"ren",
				"RenderHint	(class)"
			],
			[
				"de",
				"drawRect	(function)"
			],
			[
				"h",
				"html"
			],
			[
				"he",
				"height	Style CSS"
			],
			[
				"back",
				"background-color"
			],
			[
				"bo",
				"border-color"
			],
			[
				"borde",
				"border-style"
			],
			[
				"le",
				"left"
			],
			[
				"al",
				"text-align"
			],
			[
				"m",
				"MatplotlibExporter	(class)"
			],
			[
				"cons",
				"console.log('$0');"
			],
			[
				"setCn",
				"setCentralWidget	(function)"
			],
			[
				"setu",
				"setUpToolBar	(function)"
			],
			[
				"if",
				"ifmain	if __name__ == '__main__'"
			],
			[
				"Mi",
				"MinimumExpanding	(class)"
			],
			[
				"add",
				"addStrut	(function)"
			],
			[
				"bl",
				"blockSignals"
			],
			[
				"ch",
				"changeColor	(function)"
			],
			[
				"col",
				"colorChanged"
			],
			[
				"Ty",
				"type	(class)"
			],
			[
				"color",
				"ColorView	(statement)"
			],
			[
				"Q",
				"QLineNumber	(module)"
			],
			[
				"Mcol",
				"MColorView	(class)"
			],
			[
				"show",
				"showColorDialog"
			],
			[
				"Qp",
				"QPen	(class)"
			],
			[
				"QPO",
				"QPointF	(class)"
			],
			[
				"draw",
				"drawEllipse	(function)"
			],
			[
				"dra",
				"drawLine	(function)"
			],
			[
				"QCom",
				"QComboBox	(class)"
			],
			[
				"QStylec",
				"QStyleOptionComboBox	(class)"
			],
			[
				"line_v",
				"line_val"
			],
			[
				"setch",
				"setChecked	(function)"
			],
			[
				"view",
				"viewBoxNum"
			],
			[
				"num",
				"viewNum"
			],
			[
				"line_vi",
				"line_viewNum"
			],
			[
				"viewBox",
				"viewBoxDict	(statement)"
			],
			[
				"sets",
				"setSizeHint"
			],
			[
				"setfix",
				"setFixedHeight	(function)"
			],
			[
				"siz",
				"sizeHint	(function)"
			],
			[
				"up",
				"updateGeometry	(function)"
			],
			[
				"vl",
				"vListWidget	(statement)"
			],
			[
				"setSi",
				"setSizePolicy	(function)"
			],
			[
				"update",
				"updateGeometry	(function)"
			],
			[
				"vli",
				"vListWidgetItem	(statement)"
			],
			[
				"viewbox",
				"viewBoxList	(statement)"
			],
			[
				"itemD",
				"itemDcFocused	(statement)"
			],
			[
				"QLi",
				"QLinearGradient	(class)"
			],
			[
				"line",
				"lineVisible	(statement)"
			],
			[
				"M",
				"MLineListWidget	(class)"
			],
			[
				"QRe",
				"QRect	(class)"
			],
			[
				"list",
				"viewBoxListWidget"
			],
			[
				"vi",
				"viewBoxListWidget"
			],
			[
				"vL",
				"vListWidgetItem	(statement)"
			],
			[
				"setsty",
				"setStyleSheet	(function)"
			],
			[
				"fo",
				"focus	(param)"
			],
			[
				"spa",
				"space2	(statement)"
			],
			[
				"setFix",
				"setFixedHeight	(function)"
			],
			[
				"setc",
				"setContentsMargins	(function)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "bokehPlotter/bokehp.py",
			"settings":
			{
				"buffer_size": 19804,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bokehPlotter/dir/Line",
			"settings":
			{
				"buffer_size": 1954,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bokehPlotter/BokehGraphEditor/EditorWindow.py",
			"settings":
			{
				"buffer_size": 3225,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bokehPlotter/dir/axis",
			"settings":
			{
				"buffer_size": 7447,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from __future__ import absolute_import\nimport sys\nimport types\nimport pickle\nimport numpy as np\nimport os\nfrom PySide.QtGui    import *\nfrom PySide.QtCore   import *\nfrom PySide.QtWebKit import *\nimport bokeh\nfrom bokeh.resources import CDN\nfrom bokeh.embed     import file_html\nfrom bokeh.models    import ColumnDataSource, Grid, GridPlot, LinearAxis, Plot, Range1d\nfrom bokeh.plotting  import figure, show, output_file,  vplot\nsys.path.append(\"..\")\nfrom GraphEditor import EditorWindow \nfrom GraphEditor.MaterialDesignList import *\n\nclass PlotWindowWidget(QMainWindow):\n	def __init__(self, parent = None):\n		super(PlotWindowWidget, self).__init__(parent)\n		self.lock = True\n		self.ID   = -1\n		self.resize(1000,800)\n		self.Web = QWebView()\n		self.Web.setContextMenuPolicy(Qt.CustomContextMenu)\n		self.lineIDCounter    = -1\n		self.lineIDDict       = {}\n\n		self.plotIDCounter    = -1\n		self.plotIDDict       = {}\n		self.html = None\n		self.setCentralWidget(self.Web)\n		self.initToolBar()\n		self.optionWindow     = EditorWindow.EditorWindow()\n		self.show()\n\n\n\n\n\n	def initToolBar(self):\n		self.toolbar = QToolBar()\n		\n		resetAction   = QAction('reset', self)\n		optionsAction = QAction('_Options', self)		\n		self.toolbar.addAction(resetAction)\n		self.toolbar.addAction(optionsAction)\n		\n		resetAction.triggered.connect(self.resetGraph)\n		optionsAction.triggered.connect(self.showOptionPanel)\n		self.addToolBar( Qt.TopToolBarArea , self.toolbar)\n\n	def showOptionPanel(self):\n		self.optionWindow.importPlotItems(self.plotIDDict, self.lineIDDict)\n		self.optionWindow.show()\n\n	def addLineHolder(self, line):	\n		self.lineIDCounter += 1\n		lineID  = self.lineIDCounter\n		self.lineIDDict[lineID] = line\n		return self.lineIDCounter	\n\n	def addPlotHolder(self, plot, rng):	\n		self.plotIDCounter += 1\n		plotID  = self.plotIDCounter\n		self.plotIDDict[plotID] = plot, rng\n		return self.plotIDCounter	\n\n\n	def getRange(self, dataSet):\n		xMins, xMaxs, yMins, yMaxs = [], [], [], []\n		for data in dataSet:\n			xMins.append(min(data[0]))\n			xMaxs.append(max(data[0]))\n			yMins.append(min(data[1]))\n			yMaxs.append(max(data[1]))\n		xmin, xmax, ymin, ymax = min(xMins), max(xMaxs), min(yMins), max(yMaxs)\n\n		spamX, spamY = [float(xmax-xmin)*0.05, float(ymax-ymin)*0.05]\n		rng = [xmin-spamX, xmax+spamX, ymin-spamY, ymax+spamY]\n\n		return rng\n\n\n	def plotData(self, stack, dataSet):\n		plotPack = []\n		if not stack:\n			for i, data in enumerate(dataSet):\n				num       = self.lineIDCounter + 1\n				plotRange = self.getRange([data])\n\n				plotArea  = self.initPlotArea(rng = plotRange, num = num)\n				self.addPlotHolder(plotArea, plotRange)\n				plotPack.append(plotArea)\n\n				legendText = 'plot ' + str(num)\n				line       =  self.addPlotLine(plotArea,legendText = legendText, data = data)\n				self.addLineHolder(line)\n				\n			html = self.insertPlot(plotPack)\n\n		else:\n			num       = self.lineIDCounter + 1\n			plotRange = self.getRange(dataSet)\n			plotArea  = self.initPlotArea(rng = plotRange, num = num)\n			self.addPlotHolder(plotArea, plotRange)\n			for i, data in enumerate(dataSet):\n				legendText = 'plot ' + str(num)\n				line       =  self.addPlotLine(plotArea,legendText = legendText, data = data)\n				self.addLineHolder(line)\n			\n			plotPack.append(plotArea)\n			html = self.insertPlot(plotPack)	\n\n\n		html      = file_html(html, CDN, \"my plot\")\n		online    = 'http://cdn.pydata.org/bokeh/release'\n		offline   =  'file://' + os.getcwd() + '/BokehJS'\n		self.html = html.replace(online,  offline)\n		self.Web.setHtml(self.html)\n		self.Web.reload()\n		return self.html\n\n	\n	def initPlotArea(self, title = \"Unitled graph\", rng = [0,1,0,1], num = 0, w=800, h=300, bgc = \"#001133\", bdc = \"#001133\"):\n		tool  = 'box_zoom,box_select,crosshair, save, reset'\n		[xmin, xmax, ymin, ymax] = rng\n\n		plotArea = figure(\n			x_range         = (xmin, xmax), \n			y_range         = (ymin, ymax), \n			plot_width      = w, \n			plot_height     = h)\n\n		plotWrapper         = bokehPlot(plotArea, num)\n\n		spec            = {'width'      : w,\n						   'height'     : h,\n						   'tools'      : tool,\n						   'background' : \"#001133\",\n						   'borderfill' : \"#001133\",\n						   'viewNum'    : num}\n\n		title           = {'text'     : title,\n						   'color'    : \"#AFAFAF\",\n						   'style'    : \"bold\",\n						   'size'     : 10}\n\n		majorTick       = { 'tickIn'  : 5,\n							'tickOut' : 0,\n							'width'   : 1,\n							'color'   : \"#AFAFAF\"}  \n\n		minorTick       = { 'tickIn'  : 3,\n							'tickOut' : 0,\n							'width'   : 1,\n							'color'   : \"#AFAFAF\"}  \n\n		plotArea.add_layout(LinearAxis(), 'right')\n		plotArea.add_layout(LinearAxis(), 'above')\n\n		plotWrapper.plot_spec( **spec)\n		plotWrapper.plot_title(**title)\n		for index in range(len(plotArea.axis)):\n			other = \"y\" if index == 2 else \"\"\n			text  = \"x\" if index == 1 else other\n			\n			axis_label = {'text'     : text,\n						  'color'    : \"#AFAFAF\"}\n			plotWrapper.plot_axis(num   = index,      color     = '#AFAFAF', width     = 1, \n								  label = axis_label, majorTick = majorTick, minorTick = minorTick)\n\n\n		plotArea.xgrid.grid_line_color = \"#AFAFAF\"\n		plotArea.xgrid.grid_line_alpha =  0.5\n		plotArea.xgrid.grid_line_dash  = [3,3]\n		plotArea.ygrid.grid_line_color = \"#C8C8C8\"\n		plotArea.ygrid.grid_line_alpha =  0.5\n		plotArea.ygrid.grid_line_dash  = [3,3]\n		return plotArea\n\n	\n\n	def addPlotLine(self, plotArea, data = [None, None], legendText = 'plot', radii = 0.005, \n						  color = \"#c8c8c8\", width = 1.5, symbol = 'o', visible = True):\n		x    = np.array(data[0])\n		y    = np.array(data[1])\n		l    = plotArea.line(x, y, legend=legendText, line_color=color, line_width = width, visible = visible)\n		line = bokehLine(l.glyph)\n\n		line.line_val( \n			name    = legendText, \n			color   = color, \n			width   = width,\n			style   = None, \n			symbol  = symbol, \n			visible = visible, \n			viewNum = None\n			)\n\n		if symbol != None:\n			plotArea.scatter(x, y, \n				radius          = radii, \n				radius_dimension= 'y',  \n				fill_color      = color,\n				fill_alpha      = 1, \n				line_color      = None, \n				legend          = legendText)\n\n		plotArea.legend.orientation           = \"top_left\"\n		plotArea.legend.background_fill_alpha = 0.5\n		plotArea.legend.border_line_width     = 1\n		plotArea.legend.border_line_color     = \"#C8C8C8\"\n		plotArea.legend.label_standoff        = 5\n		plotArea.legend.glyph_width           = 20\n		plotArea.legend.legend_spacing        = 5\n		plotArea.legend.legend_padding        = 20\n		return line\n\n\n	def insertPlot(self, plotSets):\n		\n		layout = vplot(*plotSets)\n		output_file(\"les_mis.html\")\n		# show(layout)\n		for plot in plotSets:\n			plot.toolbar_location = None\n		return layout\n\n	def resetGraph(self):\n		# for ID in self.plotIDDict:\n		# 	plot, rng = self.plotIDDict[ID]\n		# 	plot.x_range = Range1d(start=rng[0], end=rng[1])\n		# 	plot.y_range = Range1d(start=rng[2], end=rng[3])\n		for ID in self.lineIDDict:\n			line = self.lineIDDict[ID]\n			line.line_visible(False)\n		# html = file_html(self.div, CDN, \"my plot\")\n		# online   = 'http://cdn.pydata.org/bokeh/release'\n		# offline  =  'file://' + os.getcwd() \n		# html = html.replace(online,  offline)\n		self.Web.setHtml(self.html)\n		self.Web.reload()\n\n\n	def saveCrew(self, dataSet):\n		fileName   = './savedData.pkl'\n		fileHolder = open(fileName, 'wb')\n		try:\n			pickle.dump(dataSet, fileHolder)\n		except (EnvironmentError, pickle.PicklingError) as err:\n			raise SaveError(str(err))\n		fileHolder.close()\n\n	def loadCrew(self):\n		fileName = './savedData.pkl'\n		package  = open( fileName, 'rb' )\n		data = pickle.load( package )\n\n		package.close()\n		return data\n\n	def closeEvent(self, event):\n		if self.lock:\n			self.showMinimized()\n			event.ignore()\n\n		else:\n			self.showMaximized()\n			event.accept()\n\n	def unlock(self) :\n		self.lock = False\n\n	def lock(self) :\n		self.lock = True	\n\nclass bokehPlot(object):\n	def __init__(self, plot, parent=None):\n		super(bokehPlot, self).__init__()\n		self.num   = None\n		self.plot  = plot\n		self.xaxis = self.plot.axis[0]\n		self.yaxis = self.plot.axis[1]\n\n		self.spec              = {'width'      : self.plot.plot_width,\n								  'height'     : self.plot.plot_height,\n								  'tools'      : self.plot.tools,\n								  'background' : self.plot.background_fill,\n								  'borderfill' : self.plot.border_fill,\n								  'viewNum'    : self.num} \n\n		self.title             = {'text'    : self.plot.title,\n								  'color'   : self.plot.title_text_color ,\n								  'style'   : self.plot.title_text_font_style,\n								  'size'    : self.plot.title_text_font_size}\n\n		self.xaxis_label       = {'text'    : self.xaxis.axis_label,\n								  'color'   : self.xaxis.axis_label_text_color}\n\n		self.yaxis_label       = {'text'    : self.yaxis.axis_label,\n								  'color'   : self.yaxis.axis_label_text_color}\n\n		self.xaxis_majorTick   = {'tickIn'  : self.xaxis.major_tick_in,\n								  'tickOut' : self.xaxis.major_tick_out,\n								  'width'   : self.xaxis.major_tick_line_width,\n								  'color'   : self.xaxis.major_tick_line_color}  \n\n		self.xaxis_minorTick   = {'tickIn'  : self.xaxis.minor_tick_in,\n								  'tickOut' : self.xaxis.minor_tick_out,\n								  'width'   : self.xaxis.minor_tick_line_width,\n								  'color'   : self.xaxis.minor_tick_line_color}  \n \n		self.yaxis_majorTick   = {'tickIn'  : self.yaxis.major_tick_in,\n								  'tickOut' : self.yaxis.major_tick_out,\n								  'width'   : self.yaxis.major_tick_line_width,\n								  'color'   : self.yaxis.major_tick_line_color}  \n\n		self.yaxis_minorTick   = {'tickIn'  : self.yaxis.minor_tick_in,\n								  'tickOut' : self.yaxis.minor_tick_out,\n								  'width'   : self.yaxis.minor_tick_line_width,\n								  'color'   : self.yaxis.minor_tick_line_color}   \n\n	def plot_spec(self,  width      = None, height     = None, tools   = None, \n						 background = None, borderfill = None, viewNum = None):\n		if width is not None:\n			self.plot.plot_width                   = width\n		if height is not None:\n			self.plot.plot_height                  = height\n		if background:\n			self.plot.background_fill              = background\n		if borderfill:\n			self.plot.border_fill                  = borderfill\n		if viewNum is not None:\n			self.viewNum                           = viewNum\n\n		return self.plot_spec\n\n\n	def plot_title(self, text  = None, color = None, \n						 style = None, size  = None):\n		if text is not None:\n			self.plot.title                        = text\n		if color:\n			self.plot.title_text_color             = color\n		if style:\n			self.plot.title_text_font_style        = style\n		if size is not None:\n			self.plot.title_text_font_size         = str(size)+\"pt\"\n\n		return self.title\n\n\n	def plot_xaxis(self, color     = None, width     = None, label = None,\n						 majorTick = None, minorTick = None):\n		if color:\n			self.xaxis_color                  = color\n		if width is not None:\n			self.xaxis_width                  = width\n		if label:\n			self.plot_xaxis_label(**label)\n		if majorTick:\n			self.plot_xaxis_majorTick(**majorTick)\n		if minorTick:\n			self.plot_xaxis_minorTick(**minorTick)\n\n		return self.xaxis\n\n\n	def plot_xaxis_label(self, text = None, color = None):\n		if text is not None:\n			self.xaxis.axis_label            = text\n		if color:\n			self.xaxis.axis_label_text_color = color\n\n		return self.xaxis_label\n\n\n	def plot_xaxis_majorTick(self, tickIn = None, tickOut = None, width = None, color  = None):\n		if tickIn  is not None:\n			self.xaxis.major_tick_in         = tickIn \n		if tickOut is not None:\n			self.xaxis.major_tick_out        = tickOut \n		if width   is not None:\n			self.xaxis.major_tick_line_width = width\n		if color:\n			self.xaxis.major_tick_line_color = color\n\n		return self.xaxis_majorTick\n\n\n	def plot_xaxis_minorTick(self, tickIn = None, tickOut = None, width = None, color  = None):\n		if tickIn  is not None:\n			self.xaxis.minor_tick_in         = tickIn \n		if tickOut is not None:\n			self.xaxis.minor_tick_out        = tickOut \n		if width   is not None:\n			self.xaxis.minor_tick_line_width = width\n		if color:\n			self.xaxis.minor_tick_line_color = color\n\n		return self.xaxis_minorTick\n\n\n	def plot_yaxis(self, color     = None, width     = None, label = None,\n						 majorTick = None, minorTick = None):\n		if color:\n			self.yaxis_color                  = color\n		if width is not None:\n			self.yaxis_width                  = width\n		if label:\n			self.plot_yaxis_label(**label)\n		if majorTick:\n			self.plot_yaxis_majorTick(**majorTick)\n		if minorTick:\n			self.plot_yaxis_minorTick(**minorTick)\n\n		return self.yaxis\n\n	def plot_yaxis_label(self, text = None, color = None):\n		if text is not None:\n			self.yaxis.axis_label                  = text\n		if color:\n			self.yaxis.axis_label_text_color       = color\n\n		return self.yaxis_label\n\n	def plot_yaxis_majorTick(self, tickIn = None, tickOut = None, width = None, color  = None):\n		if tickIn  is not None:\n			self.yaxis.major_tick_in          = tickIn \n		if tickOut is not None:\n			self.yaxis.major_tick_out         = tickOut \n		if width   is not None:\n			self.yaxis.major_tick_line_width  = width\n		if color:\n			self.yaxis.major_tick_line_color  = color\n\n		return self.yaxis_majorTick\n\n	def plot_yaxis_minorTick(self, tickIn = None, tickOut = None, width = None, color  = None):\n		if tickIn  is not None:\n			self.yaxis.minor_tick_in          = tickIn \n		if tickOut is not None:\n			self.yaxis.minor_tick_out         = tickOut \n		if width   is not None:\n			self.yaxis.minor_tick_line_width  = width\n		if color:\n			self.yaxis.minor_tick_line_color  = color\n\n		return self.yaxis_minorTick		\n\n\n	def plot_axis(self, num   = None, color     = None, width     = None, \n						label = None, majorTick = None, minorTick = None):\n		if num is not None:\n			axis = self.plot.axis[num]\n			if color:\n				axis.axis_line_color                  = color\n			if width is not None:\n				axis.axis_line_width                  = width\n			if label:\n				self.plot_axis_label(    num = num, **label)\n			if majorTick:\n				self.plot_axis_majorTick(num = num, **majorTick)\n			if minorTick:\n				self.plot_axis_minorTick(num = num, **minorTick)\n\n			# return axis\n\n\n	def plot_axis_label(self, num = None, text = None, color = None):\n		if num is not None:\n			axis = self.plot.axis[num]\n			if text is not None:\n				axis.axis_label                  = text\n			if color:\n				axis.axis_label_text_color       = color\n\n		axis_label = {'text'    : axis.axis_label,\n					  'color'   : axis.axis_label_text_color}\n\n		return axis_label\n\n	def plot_axis_majorTick(self, num     = None, tickIn = None, \n								  tickOut = None, width  = None, color  = None):\n		if num is not None:\n			axis = self.plot.axis[num]\n			if tickIn  is not None:\n				axis.major_tick_in          = tickIn \n			if tickOut is not None:\n				axis.major_tick_out         = tickOut \n			if width   is not None:\n				axis.major_tick_line_width  = width\n			if color:\n				axis.major_tick_line_color  = color\n\n			axis_majorTick   = {'tickIn'  : axis.major_tick_in,\n								'tickOut' : axis.major_tick_out,\n								'width'   : axis.major_tick_line_width,\n								'color'   : axis.major_tick_line_color}\n		return axis_majorTick\n\n\n	def plot_axis_minorTick(self, num     = None, tickIn = None, \n								  tickOut = None, width  = None, color  = None):\n		if num is not None:\n			axis = self.plot.axis[num]\n			if tickIn  is not None:\n				axis.minor_tick_in          = tickIn \n			if tickOut is not None:\n				axis.minor_tick_out         = tickOut \n			if width   is not None:\n				axis.minor_tick_line_width  = width\n			if color:\n				axis.minor_tick_line_color  = color\n				\n			axis_minorTick   = {'tickIn'  : axis.minor_tick_in,\n								'tickOut' : axis.minor_tick_out,\n								'width'   : axis.minor_tick_line_width,\n								'color'   : axis.minor_tick_line_color}\n		return axis_minorTick 	\n\n\nclass bokehLine(object):\n	def __init__(self, line, symbol, viewNum, parent = None):\n		self.line    = line\n		self.symbol  = symbol\n		self.viewNum = viewNum\n		self.val = {'name'    : self.line.name, \n					'color'   : self.line.line_color,\n					'width'   : self.line.line_width,\n					'style'   : None,\n					'symbol'  : self.symbol, \n					'visibe'  : self.line.visible, \n					'viewNum' : self.viewNum}\n\n		self.data,    self.name,    self.color  = None, None, None\n		self.width,   self.style,   self.symbol = None, None, None\n		self.visible, self.viewNum, self.line   = None, None, line\n\n	def line_name(self, name = None):\n		if name is not None:\n			self.name      = name\n			self.line.name = name\n		return self.name\n\n	def line_color(self, color = None ):\n		if color:\n			self.color           = color\n			self.line.line_color = color\n		return self.color\n\n	def line_width(self, width = None ):\n		if width:\n			self.width           = width\n			self.line.line_width = width\n		return self.width	\n\n	def line_style(self, style = None ):\n		if style:\n			self.style = style\n\n		return self.style	\n\n	def line_symbol(self, symbol = None ):\n		if symbol:\n			self.symbol = symbol\n\n		return self.symbol\n\n	def line_visible(self, visible = None ):\n		if visible is not None:\n			self.visible      = visible\n			self.line.visible = visible\n		return  self.visible	\n\n\n	def line_viewNum(self, viewNum = None):\n		if viewNum is not None:\n			self.viewNum = viewNum\n		return self.viewNum\n\n	def line_val(self, name  = None, color  = None, width   = None,\n					   style = None, symbol = None, visible = None, viewNum = None):\n		\n		return None\n\n# class bokehSymbol(object):\n# 	def __init__(self, data = [None, None], parent = None):\n# 		self.color   = color\n# 		self.size    = size\n# 		self.outline = outline\n# 		self.width   = width\n# 		self.visible = visible\n# 	def symbol_color(self, color = None):\n# 		if color:\n# 			self.scolor = color\n# 			self.setSymbolBrush(pg.mkBrush(color = color))\n# 		return self.scolor\n\n# 	def symbol_size(self, size = None):\n# 		if size:\n# 			self.ssize = size\n# 			self.setSymbolSize(size)\n# 		return self.ssize\n\n# 	def symbol_penColor(self, penC = None):\n# 		if penC:\n# 			self.spenColor = penC\n# 			self.setSymbolPen(pg.mkPen(color = penC))\n# 		return self.spenColor	\n\n# 	def symbol_penWidth(self, penW = None):\n# 		if penW != None:\n# 			pen = self.symbol_penColor()\n# 			self.spenWidth = penW\n# 			if penW <= 0:\n# 				self.symbol_penColor((pen[0], pen[1], pen[2], 0))\n# 			if penW >  0:\n# 				self.symbol_penColor((pen[0], pen[1], pen[2], 255))\n# 				self.spenWidth = penW\n# 			self.setSymbolPen(pg.mkPen(width = penW))\n# 		return self.spenWidth	\n\n# 	def symbol_outLine(self, outLine = None ):\n# 		pen   = self.symbol_penColor()\n# 		if outLine == True:\n# 			self.symbol_penColor( (pen[0],   pen[1],   pen[2],   255))\n# 			self.soutLine = outLine\n# 		if outLine == False:\n# 			self.symbol_penColor( (pen[0],   pen[1],   pen[2],   0))\n# 			self.soutLine = outLine\n# 		return self.soutLine\n\n# 	def symbol_visible(self, visible = None ):\n# 		color = self.symbol_color()\n# 		if visible == True:\n# 			self.symbol_color((   color[0], color[1], color[2], 255))\n# 			self.svisible = visible\n# 		if visible == False:\n# 			self.symbol_color((    color[0], color[1], color[2], 0))\n# 			self.symbol_outLine(False)\n# 			self.svisible = visible\n# 		return  self.svisible	\n\n\n\n# 	def symbol_val(self, color   = None, size  = None,\n# 						   penC    = None, penW  = None,\n# 						   outLine = None, visible = None):\n# 		return [self.symbol_color(color),     self.symbol_size(size),\n# 				self.symbol_penColor(penC),   self.symbol_penWidth(penW),\n# 				self.symbol_outLine(outLine), self.symbol_visible(visible)]\n\n	\n\ndef Debugger():\n	app  = QApplication(sys.argv)\n	form = PlotWindowWidget()\n	data = form.loadCrew()\n	form.plotData(0, data)\n	form.lock = False\n	form.show()\n	import os\n	print \"   *-*-*-*-* deBug mode is on *-*-*-*-*\"\n	print \"File Path: \" + os.path.realpath(__file__)\n	app.exec_()\nDebugger()",
			"settings":
			{
				"buffer_size": 19619,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/Cpp-11.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++11/C++11.sublime-build",
					""
				],
				[
					"Packages/C++11/C++11.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++11/C++11.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/Cpp-11.sublime-build",
					""
				],
				[
					"Packages/User/Cpp-11.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/Cpp-11.sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 368.0,
		"last_filter": "pci",
		"selected_items":
		[
			[
				"pci",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: re",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: r",
				"Package Control: Remove Package"
			],
			[
				"Package Control:r",
				"Package Control: Remove Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"menu",
				"View: Toggle Menu"
			],
			[
				"Package Control: i",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 344.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/rawr/github/Sloth/NightlyBuild.py",
		"/home/rawr/github/Sloth/plotSubWin.py",
		"/home/rawr/github/Sloth/GraphEditor/EditorWindow.py",
		"/home/rawr/github/Sloth/m.py",
		"/home/rawr/github/Sloth/GraphEditor/GraphEditor.py",
		"/home/rawr/github/Sloth/GraphEditor/__init__.py",
		"/home/rawr/github/Sloth/GraphEditor/__main__.py",
		"/home/rawr/github/temp_shit/Trapezoid/polyangle.py",
		"/home/rawr/Desktop/test.py",
		"/home/rawr/github/temp_shit/Trapezoid/Trapezoid.py",
		"/home/rawr/github/temp_shit/k.py",
		"/home/rawr/github/temp_shit/findme.py",
		"/home/rawr/github/temp_shit/WorkBookWin.py",
		"/home/rawr/github/NodeGUI/JNode.py",
		"/home/rawr/github/temp_shit/damndict.py",
		"/home/rawr/github/temp_shit/del.py",
		"/home/rawr/github/temp_shit/pickle_loader.py",
		"/home/rawr/github/Changer/Changer.py",
		"/home/rawr/github/NodeGUI/NodeGUI2.py",
		"/home/rawr/github/loginGUI/AutoLoginBot.py",
		"/home/rawr/github/temp_shit/comparer.py",
		"/home/rawr/github/temp_shit/untitled.py",
		"/home/rawr/github/temp_shit/ListEditor.py",
		"/home/rawr/Desktop/temp test.py",
		"/home/rawr/Desktop/Trapezoid.py",
		"/home/rawr/github/NodeGUI/NodeGUI.py",
		"/home/rawr/github/NodeGUI/Node.py",
		"/home/rawr/github/NodeGUI/TextNode.py",
		"/home/rawr/github/NodeGUI/TNode.py",
		"/home/rawr/Desktop/m.py",
		"/home/rawr/github/NodeGUI/JackNode.py",
		"/home/rawr/github/NodeGUI/HoverScene.py",
		"/home/rawr/Downloads/untitled.py",
		"/home/rawr/Downloads/strd_nist_fit.py",
		"/home/rawr/github/Changer/ListEditor.py",
		"/home/rawr/github/Sloth/bokehPlotter/a.html",
		"/home/rawr/Desktop/testpy.py",
		"/home/rawr/Desktop/Line",
		"/home/rawr/Desktop/plotArea",
		"/home/rawr/Desktop/axis",
		"/home/rawr/Desktop/bokehp compare",
		"/home/rawr/Downloads/scipy-0.14.0/scipy/version.py",
		"/home/rawr/Downloads/PyXRD-0.6.7/run.py",
		"/home/rawr/Downloads/PyXRD-0.6.7/setup.py",
		"/home/rawr/Downloads/PyXRD-0.6.7/run_tests.py",
		"/home/rawr/.wine/dosdevices/c:/power cell/AN_RU20.RAW",
		"/etc/bumblebee/bumblebee.conf",
		"/etc/bumblebee/sudo",
		"/etc/bumblebee/gedit",
		"/etc/bumblebee/xorg.conf.nvidia",
		"/etc/bumblebee/xorg.conf.nouveau",
		"/home/rawr/Downloads/CPP/grade.h",
		"/home/rawr/Downloads/CPP/pp.cpp",
		"/home/rawr/github/Sloth/bokehPlotter/bokeh-0.10.0.min.js",
		"/home/rawr/Desktop/untitled.html",
		"/home/rawr/Desktop/perspective.py",
		"/home/rawr/github/Sloth/wbSubWin.py",
		"/home/rawr/Desktop/untitled.py",
		"/home/rawr/Desktop/crop.py",
		"/home/rawr/Desktop/a.py",
		"/home/rawr/Desktop/comp.py",
		"/home/rawr/Desktop/Contours.py",
		"/home/rawr/github/AutoSchedule/AutoSchedule.py",
		"/home/rawr/Downloads/CPP/CV.cpp",
		"/home/rawr/Downloads/opencv-3.0.0/modules/highgui/src/window_QT.h",
		"/home/rawr/Desktop/SubWinList.py",
		"/home/rawr/Desktop/abc.py",
		"/home/rawr/github/Sloth/graphSelectorListEditor.py",
		"/home/rawr/github/Sloth/expTableWidget.py",
		"/home/rawr/github/Sloth/graphSelectorWindow.py",
		"/home/rawr/github/Sloth/GraphEditor/MaterialDesignList/MLineListWidget.py",
		"/home/rawr/github/Sloth/GraphEditor/MaterialDesignList/MViewBoxListWidget.py",
		"/home/rawr/github/Sloth/GraphEditor/MaterialDesignList/viewBoxListWidget.py",
		"/home/rawr/github/NodeGUI (copy)/NodeGUI2.py",
		"/home/rawr/github/NodeGUI (copy)/JNode.py",
		"/home/rawr/github/NodeGUI (copy)/HoverScene.py",
		"/home/rawr/github/NodeGUI (copy)/PysideGraph.py",
		"/home/rawr/github/NodeGUI (copy)/ErrorClass.py",
		"/home/rawr/github/NodeGUI (copy)/Untitled Document",
		"/home/rawr/github/AutoSchedule/style.qss",
		"/home/rawr/github/Changer/README.md",
		"/home/rawr/github/AutoSchedule/README.md",
		"/home/rawr/Google Drive/codework/WSpre/wsPRE2.py",
		"/home/rawr/Google Drive/codework/WSpre/t.py",
		"/home/rawr/Google Drive/codework/schedule/wsGUI.py",
		"/home/rawr/Google Drive/codework/schedule_v2/wsGUI.py",
		"/home/rawr/github/revealEditor/README.md",
		"/home/rawr/github/revealEditor/Reveal Editor.py",
		"/home/rawr/github/revealEditor/css/theme/README.md",
		"/home/rawr/github/NodeGUI/README.md",
		"/home/rawr/github/revealEditor/js.py",
		"/home/rawr/.config/sublime-text-3/Packages/User/Cpp-11.sublime-build",
		"/home/rawr/Downloads/CPP/grade.cpp",
		"/home/rawr/.config/sublime-text-3/Installed Packages/C++11.sublime-package",
		"/home/rawr/Downloads/CPP/GradeBook.h",
		"/home/rawr/Downloads/CPP/GradeBook.cpp",
		"/home/rawr/Downloads/CPP/MObject.cpp",
		"/home/rawr/Downloads/CPP/MObject.h",
		"/home/rawr/Downloads/CPP/Object.h",
		"/home/rawr/Downloads/CPP/Object.cpp",
		"/home/rawr/Downloads/pp.cpp",
		"/home/rawr/Downloads/CPP/pp",
		"/home/rawr/Desktop/Untitled Document",
		"/home/rawr/Desktop/zz.py",
		"/home/rawr/.config/sublime-text-3/Packages/C++11/C++11.sublime-settings",
		"/home/rawr/.config/sublime-text-3/Packages/User/C++11.sublime-build",
		"/home/rawr/.config/sublime-text-3/Packages/C++11/messages/install.txt",
		"/home/rawr/.config/sublime-text-3/Packages/User/CTags.sublime-settings",
		"/home/rawr/Downloads/Untitled Document",
		"/home/rawr/github/Sloth/bokehPlotter/bokehp.py",
		"/home/rawr/github/revealEditor/index (copy).html",
		"/home/rawr/.config/sublime-text-3/Packages/CTags/CTags.sublime-settings",
		"/home/rawr/Desktop/jsplot.txt",
		"/home/rawr/Desktop/bokehp.py",
		"/home/rawr/Downloads/bokeh-master/examples/interactions/us_marriages_divorces/us_marriages_divorces_interactive.py",
		"/home/rawr/Downloads/bokeh-master/examples/embed/widget.py",
		"/home/rawr/Downloads/bokeh-master/examples/embed/slideshow/app_reveal.py",
		"/home/rawr/Downloads/bokeh-master/examples/embed/simple/simple.py",
		"/home/rawr/Downloads/bokeh-master/examples/embed/embed_multiple.py",
		"/home/rawr/Downloads/bokeh-master/examples/embed/animated.py",
		"/home/rawr/Desktop/DrawSVG-master/SDFSDF.PY",
		"/home/rawr/Desktop/DrawSVG-master/examples.py",
		"/home/rawr/Desktop/DrawSVG-master/exampleGraphs.py",
		"/home/rawr/Desktop/DrawSVG-master/drawSVGGraph.py",
		"/home/rawr/Desktop/SDFSDF.PY",
		"/home/rawr/Desktop/123.SVG",
		"/home/rawr/Desktop/abc.svg",
		"/home/rawr/ProgramFiles/android-pyside-build-scripts/env.sh"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"data",
			"symbol",
			"mai",
			"may",
			"_line_",
			"addLineHolder",
			"lineIDDict",
			"addPlotHolder",
			" addPlotHolder",
			"plotIDDict",
			"EditorWindow",
			"self.option",
			"goption",
			"...     ",
			"pre",
			"geo",
			"change",
			"prepareGeometryChange()",
			"poli",
			"contentSceneRectF",
			"contentRect",
			"scene",
			"elf.scene",
			"QPaint",
			"Qpainter",
			"drawRect",
			"painter",
			"paint",
			"print",
			"div",
			"saveData",
			"saveCrew",
			"save",
			"self.mainWindow",
			"self.plot(",
			"editor",
			"tick",
			"color",
			"major",
			"axis",
			"', '",
			"axis",
			"lab",
			"', '",
			"xaxis",
			"label",
			"xaxis",
			"self",
			"target",
			"border_fill",
			"self",
			"wrapp",
			"xaxis",
			"major",
			"target",
			"xaxis",
			"self",
			"self,",
			"self.",
			"hight",
			"lable",
			"major",
			"back",
			"width",
			"wid",
			"height",
			"hight",
			"xaxis",
			"major",
			"xaxis",
			"plotArea",
			"340",
			"title",
			"', '",
			"title",
			"addLineHolder",
			"color",
			"viewNum",
			"set",
			"color",
			"', '",
			"glyph",
			"color",
			"', '",
			"target,",
			"target.",
			"http",
			"plotIDCounter",
			"lineIDCounter",
			"p1.",
			"rng",
			"matchesMask",
			"img3",
			"img2",
			"img1",
			"5",
			"./free-random-object-vectors-43244",
			"free-random-object-vectors-43244.jpg",
			"sys.argv",
			"OpenNewWorkBook",
			"newwb",
			"SubWinList",
			"CreateTableSub",
			"title",
			"', '",
			"np",
			"plotData",
			"loadCrew",
			"aveData",
			"', '",
			"height",
			"hei",
			"', '",
			"tick",
			"', '",
			"self.plot.plotIDDict",
			"THE HTML PRESENTATION FRAMEWORK",
			"font",
			"setPanelVal",
			"print",
			"addLine",
			"addPlotArea",
			"insertPlot",
			"addPlotHolder",
			"connect",
			"print ",
			"dic",
			"dict"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"line",
			"   ",
			"minor",
			"\n",
			"plot",
			"self",
			"target",
			"yaxis",
			"minor",
			"self",
			"yaxis",
			"target",
			"target,",
			"target.",
			"minor",
			"hight",
			"yaxis",
			"minor",
			"yaxis",
			"self._plot_",
			"\n",
			"self,",
			"self.",
			"plotArea.",
			"cropImg",
			"trainImg",
			"targetImg",
			"./a\n",
			"a.jpg\n",
			"imageSample\n",
			"\n",
			"width",
			"\n",
			"plotArea",
			"', '\n",
			"self.",
			"\n",
			"', \n",
			"plotListItem",
			"",
			"self.subWinDict",
			"AddWinListItem",
			"subWinList",
			"killConnect",
			"plug",
			"275",
			"121212",
			"090909",
			"222222",
			"888888",
			"	",
			"self.listWidget",
			"1F7514",
			"#1F450C",
			"#53A83E",
			"#8DFF70",
			"#33FF00",
			"	",
			"self.typeThread",
			"self.hbox1",
			"self.hbox1\n",
			"showError",
			"self.showErr",
			"self.ashowErr",
			"aself.showErr",
			"self.showErr",
			"showMSG",
			"showgg",
			"QLabel",
			"QLable",
			"#Autosuspend for",
			"#Runtime PM",
			"#Enable",
			"	\necho",
			"	\n",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "bokehPlotter/bokehp.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19804,
						"regions":
						{
						},
						"selection":
						[
							[
								17426,
								17426
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5399.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "bokehPlotter/dir/Line",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1954,
						"regions":
						{
						},
						"selection":
						[
							[
								395,
								395
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 337.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "bokehPlotter/BokehGraphEditor/EditorWindow.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3225,
						"regions":
						{
						},
						"selection":
						[
							[
								3102,
								3102
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2222.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "bokehPlotter/dir/axis",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7447,
						"regions":
						{
						},
						"selection":
						[
							[
								1005,
								1005
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1371.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19619,
						"regions":
						{
						},
						"selection":
						[
							[
								16991,
								16991
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 12261.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.562225475843,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 211.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "untitled.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
